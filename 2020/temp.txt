https://www.ncbi.nlm.nih.gov/nuccore?term=mitochondrion%5BAll%20Fields%5D%20AND%20%28biomol_genomic%5BPROP%5D%20AND%20refseq%5Bfilter%5D%20AND%20is_nuccore%5Bfilter%5D%20AND%20mitochondrion%5Bfilter%5D%29&cmd=DetailsSearch

nucleotide DB
mitochondrion[All Fields] AND (biomol_genomic[PROP] AND refseq[filter] AND is_nuccore[filter] AND mitochondrion[filter])

10189 @ 2020-05-23







// exponentialBackoff(sometimesFails, 10, 100, function(result) {
	// 	console.log('the result is',result);
	// });

	// // A function that keeps trying, "toTry" until it returns true or has
	// // tried "max" number of times. First retry has a delay of "delay".
	// // "callback" is called upon success.
	// function exponentialBackoff(toTry, max, delay, callback) {
	// 	console.log('max',max,'next delay',delay);
	// 	var result = toTry();

	// 	if (result) {
	// 		callback(result);
	// 	} else {
	// 		if (max > 0) {
	// 			setTimeout(function() {
	// 				exponentialBackoff(toTry, --max, delay * 2, callback);
	// 			}, delay);

	// 		} else {
	// 			console.log('we give up');
	// 		}
	// 	}
	// }

	// function sometimesFails() {
	// 	var percentFail = 0.8;

	// 	return Math.random() >= 0.8;
	// }

	// function consoleLog() {
	// 	var args = [].slice.apply(arguments);

	// 	document.querySelector('#result').innerHTML += '\n' + args.join(' - ');
	// }


----------------------

function loadFastaFromNCBI(ind, accID, callback){
		console.log(accID, accID.length);
		$.ajax({
			// tryCount : 0,
        	// retryLimit : 3,
			// delay:500,
        	url: "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=nuccore&rettype=fasta&retmode=text&id="+accID,
        	// url: "http://localhost:8081/2020/data/"+accID+".fasta",
			success: function(result){
				var data = result.split(/\n\r?/gi);
				var header;
				if( data.length && data[0][0]==='>' ){ header = data[0]; }
				while (data.length && data[0][0] === '>') {data.shift();}
				var outputFasta=data.join('');
				if(dbg){console.log('['+accID+'] len='+outputFasta.length);}
				callback(ind, accID, outputFasta, header);
			},
			error: function(xhr, status, error) {
				console.log('STATUS=',status,'ERROR from loadFastaFrom_ncbi=',error);

				errorHasOccured = true;
				$('#progress').html('<div class="alert alert-danger" role="alert"><span class="glyphicon glyphicon-exclamation-sign" aria-hidden="true"></span><span class="sr-only">Error:</span>'+' ERROR [<strong>'+error+'</strong>] while fetching data from NCBI for [<strong>'+accID+'</strong>]</div>');
				$('#aidinfo').html('<div class="alert alert-danger" role="alert"><span class="glyphicon glyphicon-exclamation-sign" aria-hidden="true"></span><span class="sr-only">Error:</span>'+' ERROR [<strong>'+error+'</strong>] while fetching data from NCBI for [<strong>'+accID+'</strong>]</div>');


			}
		});
	}

	function getTaxaFromNCBI(ind, idNCBI){
		if(dbg){console.log("getting taxa for id=",ind);}
		$.ajax({
			url: "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=nucleotide&rettype=gb&retmode=xml&id="+idNCBI,
			success: function(result){
				// res=result;
				// console.log("res=", result);
				var taxaString = new XMLSerializer().serializeToString(result);
				var taxa = /<GBSeq_taxonomy>(.*)<\/GBSeq_taxonomy>/g.exec(taxaString);
				if(dbg){console.log("taxa=", taxa[1]);}
				allSequences[ind][2] = taxa[1].trim();

				callsNCBIDone += 0.5;
				progress = callsNCBIDone*100.0/accIDs.length;
				progress = progress.toFixed(2);
				if(!errorHasOccured){$('#progress').html(progress+'%');}
				if(callsNCBIDone == accIDs.length && !errorHasOccured){
					time = new Date();
					step1B = time.getTime();
					computeDistMatrix();
				}
			},
			error: function(xhr, status, error) {
				console.log('STATUS=',status,'ERROR getTaxaFromNCBI=',error);
				errorHasOccured = true;
				$('#progress').html('<div class="alert alert-danger" role="alert"><span class="glyphicon glyphicon-exclamation-sign" aria-hidden="true"></span><span class="sr-only">Error:</span>'+' ERROR [<strong>'+error+'</strong>] while fetching Taxonomy data from NCBI for [<strong>'+idNCBI+'</strong>]</div>');
			}
		});
	}



-----------------------------

		// (async () => {
		// 	for(let i = 0; i <10; i++){
		// 		x1 = await loadFastaFromNCBI_2(1, "NC_012920");
		// 		console.log("x1=", i, x1);
		// 	}
		// })();


